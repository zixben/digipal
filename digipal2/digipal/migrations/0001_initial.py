# Generated by Django 4.0.5 on 2022-06-02 01:28

import digipal.iipfield.storage
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import iipimage.fields
import iipimage.storage
import tinymce.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('contenttypes', '0002_remove_content_type_name'),
    ]

    operations = [
        migrations.CreateModel(
            name='Allograph',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=128)),
                ('default', models.BooleanField(default=False)),
                ('hidden', models.BooleanField(default=False, help_text="If ticked the public users won't see this allograph on the web site.")),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('illustration', models.ImageField(blank=True, null=True, upload_to='uploads/images/')),
            ],
            options={
                'ordering': ['character__ontograph__sort_order', 'character__ontograph__ontograph_type__name', 'name'],
            },
        ),
        migrations.CreateModel(
            name='ApiTransform',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text='A unique title for this XSLT template.', max_length=30, unique=True)),
                ('slug', models.SlugField(editable=False, help_text='A unique code to refer to this template when using the web API. @xslt=slug', max_length=30, unique=True)),
                ('template', models.TextField(blank=True, help_text='Your XSLT template', null=True)),
                ('description', models.TextField(blank=True, help_text='A description of the transform', null=True)),
                ('mimetype', models.CharField(default='text/xml', help_text='The mime type of the output from the transform.', max_length=30)),
                ('sample_request', models.CharField(blank=True, default='graph', help_text='A sample API request this transform can be tested on. It is a API request URL without this part: http://.../digipal/api/. E.g. graph/100,101,102?@select=id,str', max_length=200, null=True)),
                ('webpage', models.BooleanField(default=False, verbose_name='Show as a webpage?')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['title'],
            },
        ),
        migrations.CreateModel(
            name='Appearance',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('legacy_id', models.IntegerField(blank=True, null=True)),
                ('text', models.CharField(max_length=128)),
                ('sort_order', models.IntegerField()),
                ('description', models.CharField(max_length=128)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name_plural': 'Appearance',
                'ordering': ['sort_order', 'text'],
            },
        ),
        migrations.CreateModel(
            name='Aspect',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=128, unique=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='AuthenticityCategory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('slug', models.SlugField(max_length=100)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['name'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='CarouselItem',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('link', models.CharField(blank=True, help_text='The URL of the page this item links to. E.g. /digipal/page/80/', max_length=200, null=True)),
                ('image_file', models.ImageField(blank=True, default=None, help_text='The image for this item. Not needed if you have provided a the URL of the image in the image field.', null=True, upload_to='uploads/images/')),
                ('image', models.CharField(blank=True, help_text='The URL of the image of this item. E.g. /static/digipal/images/Catholic_Homilies.jpg. Not needed if you have uploaded a file in the image_file field.', max_length=200, null=True)),
                ('image_alt', models.CharField(blank=True, help_text='a few words describing the image content.', max_length=300, null=True)),
                ('image_title', models.CharField(blank=True, help_text='the piece of text that appears when the user moved the mouse over the image (optional).', max_length=300, null=True)),
                ('sort_order', models.IntegerField(help_text='The order of this item in the carousel. 1 appears first, 2 second, etc. 0 is hidden.')),
                ('title', models.CharField(help_text='The caption under the image of this item. This can contain some inline HTML. You can surround some text with just <a>...</a>.', max_length=300)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=128, unique=True)),
                ('sort_order', models.PositiveIntegerField(blank=True, null=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name_plural': 'Categories',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='CharacterForm',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=128, unique=True)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Component',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=128, unique=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='ContentAttribution',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text='A unique shorthand/label for this attribution', max_length=128, unique=True)),
                ('message', tinymce.models.HTMLField(blank=True, help_text="Shown under the text in the Text Viewer. Please don't exceed six words.", null=True)),
                ('short_message', tinymce.models.HTMLField(blank=True, help_text="Shown under the text in the Text Viewer. Please don't exceed six words.", null=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='County',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('legacy_id', models.IntegerField(blank=True, null=True)),
                ('name', models.CharField(max_length=128, unique=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name_plural': 'Counties',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='CurrentItem',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('legacy_id', models.IntegerField(blank=True, null=True)),
                ('shelfmark', models.CharField(max_length=128)),
                ('description', models.TextField(blank=True, null=True)),
                ('display_label', models.CharField(max_length=128)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['repository', 'shelfmark'],
            },
        ),
        migrations.CreateModel(
            name='Date',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('legacy_id', models.IntegerField(blank=True, null=True)),
                ('date', models.CharField(max_length=128)),
                ('sort_order', models.IntegerField(blank=True, null=True)),
                ('weight', models.FloatField()),
                ('band', models.IntegerField(blank=True, null=True)),
                ('additional_band', models.IntegerField(blank=True, null=True)),
                ('post_conquest', models.BooleanField(null=True)),
                ('s_xi', models.BooleanField(null=True)),
                ('min_weight', models.FloatField(blank=True, null=True)),
                ('max_weight', models.FloatField(blank=True, null=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('legacy_reference', models.CharField(blank=True, default='', max_length=128, null=True)),
                ('evidence', models.CharField(blank=True, default='', max_length=255, null=True)),
            ],
            options={
                'ordering': ['sort_order'],
            },
        ),
        migrations.CreateModel(
            name='Feature',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=32, unique=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Format',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('legacy_id', models.IntegerField(blank=True, null=True)),
                ('name', models.CharField(max_length=128, unique=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Graph',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('display_label', models.CharField(editable=False, max_length=256)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('aspects', models.ManyToManyField(blank=True, to='digipal.aspect')),
                ('group', models.ForeignKey(blank=True, help_text='Select a graph that contains this one', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='parts', to='digipal.graph')),
            ],
            options={
                'ordering': ['idiograph'],
            },
        ),
        migrations.CreateModel(
            name='Hair',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('legacy_id', models.IntegerField(blank=True, null=True)),
                ('label', models.CharField(max_length=128, unique=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name_plural': 'Hair',
                'ordering': ['label'],
            },
        ),
        migrations.CreateModel(
            name='Hand',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('legacy_id', models.IntegerField(blank=True, null=True)),
                ('num', models.IntegerField(help_text='The order of display of the Hand label. e.g. 1 for Main Hand, 2 for Gloss.')),
                ('scragg', models.CharField(blank=True, max_length=6, null=True)),
                ('ker', models.CharField(blank=True, max_length=10, null=True)),
                ('em_title', models.CharField(blank=True, max_length=256, null=True)),
                ('label', models.TextField(blank=True, null=True)),
                ('display_note', models.TextField(blank=True, help_text='An optional note that will be publicly visible on the website.', null=True)),
                ('internal_note', models.TextField(blank=True, help_text='An optional note for internal or editorial purpose only. Will not be visible on the website.', null=True)),
                ('relevant', models.BooleanField(null=True)),
                ('latin_only', models.BooleanField(null=True)),
                ('gloss_only', models.BooleanField(null=True)),
                ('membra_disjecta', models.BooleanField(null=True)),
                ('num_glosses', models.IntegerField(blank=True, null=True)),
                ('num_glossing_hands', models.IntegerField(blank=True, null=True)),
                ('scribble_only', models.BooleanField(null=True)),
                ('imitative', models.BooleanField(null=True)),
                ('comments', models.TextField(blank=True, null=True)),
                ('display_label', models.CharField(editable=False, max_length=128)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('locus', models.CharField(blank=True, default='', max_length=300, null=True)),
                ('surrogates', models.CharField(blank=True, default='', max_length=50, null=True)),
                ('selected_locus', models.CharField(blank=True, default='', max_length=100, null=True)),
                ('appearance', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='digipal.appearance')),
                ('assigned_date', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='digipal.date')),
            ],
            options={
                'ordering': ['item_part', 'num'],
            },
        ),
        migrations.CreateModel(
            name='HistoricalItem',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.CharField(blank=True, help_text='Date of the Historical Item', max_length=128, null=True)),
                ('date_sort', models.CharField(blank=True, help_text='Optional date used for sorting HI or visualising HI on timeline. It is interpretable and bounded: e.g. 1200 x 1229.', max_length=128, null=True)),
                ('legacy_id', models.IntegerField(blank=True, null=True)),
                ('name', models.CharField(blank=True, max_length=256, null=True)),
                ('url', models.URLField(blank=True, null=True)),
                ('vernacular', models.BooleanField(null=True)),
                ('neumed', models.BooleanField(null=True)),
                ('catalogue_number', models.CharField(editable=False, max_length=128)),
                ('display_label', models.CharField(max_length=128)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('legacy_reference', models.CharField(blank=True, default='', max_length=128, null=True)),
                ('categories', models.ManyToManyField(blank=True, to='digipal.category')),
                ('hair', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='digipal.hair')),
                ('historical_item_format', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='digipal.format')),
            ],
            options={
                'ordering': ['display_label', 'date', 'name'],
            },
        ),
        migrations.CreateModel(
            name='HistoricalItemType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=128)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Idiograph',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('display_label', models.CharField(editable=False, max_length=128)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('allograph', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='digipal.allograph')),
                ('aspects', models.ManyToManyField(blank=True, to='digipal.aspect')),
            ],
            options={
                'ordering': ['allograph'],
            },
        ),
        migrations.CreateModel(
            name='ImageAnnotationStatus',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=128, unique=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name_plural': 'Image annotation statuses',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Institution',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('legacy_id', models.IntegerField(blank=True, null=True)),
                ('name', models.CharField(max_length=256)),
                ('foundation', models.CharField(blank=True, max_length=128, null=True)),
                ('refoundation', models.CharField(blank=True, max_length=128, null=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='InstitutionType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=256)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='ItemPart',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('keywords_string', models.CharField(blank=True, editable=False, max_length=500)),
                ('group_locus', models.CharField(blank=True, help_text='the locus of this part in the group', max_length=64, null=True)),
                ('locus', models.CharField(blank=True, default='face', help_text='the location of this part in the Current Item', max_length=64, null=True)),
                ('display_label', models.CharField(max_length=300)),
                ('custom_label', models.CharField(blank=True, help_text='A custom label for this part. If blank the shelfmark will be used as a label.', max_length=300, null=True)),
                ('pagination', models.BooleanField(default=False)),
                ('notes', models.TextField(blank=True, null=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('current_item', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.CASCADE, to='digipal.currentitem')),
                ('group', models.ForeignKey(blank=True, help_text='the item part which contains this one', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='subdivisions', to='digipal.itempart')),
            ],
            options={
                'ordering': ['display_label'],
            },
        ),
        migrations.CreateModel(
            name='ItemPartType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=128, unique=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='KeyVal',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('key', models.CharField(max_length=300, unique=True)),
                ('val', models.TextField(blank=True, null=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['key'],
            },
        ),
        migrations.CreateModel(
            name='Language',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('legacy_id', models.IntegerField(blank=True, null=True)),
                ('name', models.CharField(max_length=128, unique=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='LatinStyle',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('legacy_id', models.IntegerField(blank=True, null=True)),
                ('style', models.CharField(max_length=128)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['style'],
            },
        ),
        migrations.CreateModel(
            name='Measurement',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('legacy_id', models.IntegerField(blank=True, null=True)),
                ('label', models.CharField(max_length=128)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['label'],
            },
        ),
        migrations.CreateModel(
            name='MediaPermission',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('label', models.CharField(help_text='A short label describing the type of permission. For internal use only.', max_length=64)),
                ('permission', models.IntegerField(choices=[(100, 'Private'), (200, 'Thumbnail Only'), (300, 'Full Resolution')], default=100)),
                ('display_message', tinymce.models.HTMLField(blank=True, default='', help_text='This message will be displayed when the image is not available to the user.')),
            ],
            options={
                'ordering': ['label'],
            },
        ),
        migrations.CreateModel(
            name='OntographType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=128, unique=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='OwnerType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=256)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Person',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('legacy_id', models.IntegerField(blank=True, null=True)),
                ('name', models.CharField(max_length=256, unique=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Place',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('legacy_id', models.IntegerField(blank=True, null=True)),
                ('name', models.CharField(max_length=256)),
                ('other_names', models.CharField(blank=True, max_length=256, null=True)),
                ('eastings', models.FloatField(blank=True, null=True)),
                ('northings', models.FloatField(blank=True, null=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('current_county', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='county_current', to='digipal.county')),
                ('historical_county', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='county_historical', to='digipal.county')),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='PlaceType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=256)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Reference',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('legacy_id', models.IntegerField(blank=True, null=True)),
                ('name', models.CharField(max_length=128)),
                ('name_index', models.CharField(blank=True, max_length=1, null=True)),
                ('legacy_reference', models.CharField(blank=True, default='', max_length=128, null=True)),
                ('full_reference', tinymce.models.HTMLField()),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['name'],
                'unique_together': {('name', 'name_index')},
            },
        ),
        migrations.CreateModel(
            name='Region',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=128, unique=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='RequestLog',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('request', models.CharField(blank=True, default='', max_length=300, null=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('result_count', models.IntegerField(default=0)),
            ],
        ),
        migrations.CreateModel(
            name='Script',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('legacy_id', models.IntegerField(blank=True, null=True)),
                ('name', models.CharField(max_length=128)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('allographs', models.ManyToManyField(to='digipal.allograph')),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Source',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Full reference of this source (e.g. British Library)', max_length=128, unique=True)),
                ('label', models.CharField(blank=True, help_text='A shorthand for the reference (e.g. BL)', max_length=30, null=True, unique=True)),
                ('label_slug', models.SlugField(blank=True, max_length=30, null=True)),
                ('label_styled', models.CharField(blank=True, help_text='Styled version of the label, text between _underscores_ will be italicised', max_length=30, null=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('priority', models.IntegerField(default=0, help_text='Lower number has a higher display priority on the web site. 0 is top, 1 second, then 2, etc.')),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Status',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=32, unique=True)),
                ('default', models.BooleanField(default=False)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name_plural': 'Status',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='StewartRecord',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('scragg', models.CharField(blank=True, default='', max_length=300, null=True)),
                ('repository', models.CharField(blank=True, default='', max_length=300, null=True)),
                ('shelf_mark', models.CharField(blank=True, default='', max_length=300, null=True)),
                ('stokes_db', models.CharField(blank=True, default='', max_length=300, null=True)),
                ('fols', models.CharField(blank=True, default='', max_length=300, null=True)),
                ('gneuss', models.CharField(blank=True, default='', max_length=300, null=True)),
                ('ker', models.CharField(blank=True, default='', max_length=300, null=True)),
                ('sp', models.CharField(blank=True, default='', max_length=300, null=True)),
                ('ker_hand', models.CharField(blank=True, default='', max_length=300, null=True)),
                ('locus', models.CharField(blank=True, default='', max_length=300, null=True)),
                ('selected', models.CharField(blank=True, default='', max_length=300, null=True)),
                ('adate', models.CharField(blank=True, default='', max_length=300, null=True)),
                ('location', models.CharField(blank=True, default='', max_length=300, null=True)),
                ('surrogates', models.CharField(blank=True, default='', max_length=300, null=True)),
                ('contents', models.CharField(blank=True, default='', max_length=500, null=True)),
                ('notes', models.CharField(blank=True, default='', max_length=600, null=True)),
                ('em', models.CharField(blank=True, default='', max_length=800, null=True)),
                ('glosses', models.CharField(blank=True, default='', max_length=300, null=True)),
                ('minor', models.CharField(blank=True, default='', max_length=300, null=True)),
                ('charter', models.CharField(blank=True, default='', max_length=300, null=True)),
                ('cartulary', models.CharField(blank=True, default='', max_length=300, null=True)),
                ('eel', models.CharField(blank=True, default='', max_length=1000, null=True)),
                ('import_messages', models.TextField(blank=True, default='', null=True)),
                ('matched_hands', models.CharField(blank=True, default='', max_length=1000, null=True)),
            ],
            options={
                'ordering': ['scragg'],
            },
        ),
        migrations.CreateModel(
            name='Text',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.CharField(blank=True, help_text='Date of the Historical Item', max_length=128, null=True)),
                ('date_sort', models.CharField(blank=True, help_text='Optional date used for sorting HI or visualising HI on timeline. It is interpretable and bounded: e.g. 1200 x 1229.', max_length=128, null=True)),
                ('name', models.CharField(max_length=200)),
                ('legacy_id', models.IntegerField(blank=True, null=True)),
                ('url', models.URLField(blank=True, null=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('categories', models.ManyToManyField(blank=True, related_name='texts', to='digipal.category')),
            ],
            options={
                'verbose_name': 'Text Info',
                'verbose_name_plural': 'Text Info',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='TextItemPart',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('locus', models.CharField(blank=True, max_length=20, null=True)),
                ('date', models.CharField(blank=True, max_length=128, null=True)),
                ('name', models.CharField(blank=True, max_length=200, null=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('item_part', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='text_instances', to='digipal.itempart')),
                ('text', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='text_instances', to='digipal.text')),
            ],
            options={
                'unique_together': {('item_part', 'text')},
            },
        ),
        migrations.AddField(
            model_name='text',
            name='item_parts',
            field=models.ManyToManyField(related_name='texts', through='digipal.TextItemPart', to='digipal.itempart'),
        ),
        migrations.AddField(
            model_name='text',
            name='languages',
            field=models.ManyToManyField(blank=True, related_name='texts', to='digipal.language'),
        ),
        migrations.CreateModel(
            name='ScriptComponent',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('component', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='digipal.component')),
                ('features', models.ManyToManyField(to='digipal.feature')),
                ('script', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='digipal.script')),
            ],
            options={
                'ordering': ['script', 'component'],
            },
        ),
        migrations.CreateModel(
            name='Scribe',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('legacy_id', models.IntegerField(blank=True, null=True)),
                ('name', models.CharField(max_length=128, unique=True)),
                ('date', models.CharField(blank=True, max_length=128, null=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('legacy_reference', models.CharField(blank=True, default='', max_length=128, null=True)),
                ('reference', models.ManyToManyField(blank=True, to='digipal.reference')),
                ('scriptorium', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='digipal.institution')),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Repository',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('legacy_id', models.IntegerField(blank=True, null=True)),
                ('name', models.CharField(max_length=256)),
                ('short_name', models.CharField(blank=True, max_length=64, null=True)),
                ('url', models.URLField(blank=True, null=True)),
                ('comma', models.BooleanField(null=True)),
                ('british_isles', models.BooleanField(null=True)),
                ('digital_project', models.BooleanField(null=True)),
                ('copyright_notice', tinymce.models.HTMLField(blank=True, null=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('media_permission', models.ForeignKey(blank=True, default=None, help_text='The default permission scheme for images originating\n            from this repository.<br/> The Pages can override the\n            repository default permission.\n            ', null=True, on_delete=django.db.models.deletion.CASCADE, to='digipal.mediapermission')),
                ('part_of', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='parts', to='digipal.repository')),
                ('place', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='digipal.place')),
                ('type', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='repositories', to='digipal.ownertype')),
            ],
            options={
                'verbose_name_plural': 'Repositories',
                'ordering': ['place', 'short_name', 'name'],
            },
        ),
        migrations.CreateModel(
            name='Proportion',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('legacy_id', models.IntegerField(blank=True, null=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('cue_height', models.FloatField()),
                ('value', models.FloatField()),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('hand', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='digipal.hand')),
                ('measurement', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='digipal.measurement')),
            ],
            options={
                'ordering': ['hand', 'measurement'],
            },
        ),
        migrations.CreateModel(
            name='PlaceEvidence',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('legacy_id', models.IntegerField(blank=True, null=True)),
                ('written_as', models.CharField(blank=True, max_length=128, null=True)),
                ('place_description', models.CharField(blank=True, max_length=128, null=True)),
                ('evidence', models.TextField()),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('hand', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.CASCADE, to='digipal.hand')),
                ('historical_item', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.CASCADE, to='digipal.historicalitem')),
                ('place', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='digipal.place')),
                ('reference', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='digipal.reference')),
            ],
            options={
                'ordering': ['place'],
            },
        ),
        migrations.AddField(
            model_name='place',
            name='region',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='digipal.region'),
        ),
        migrations.AddField(
            model_name='place',
            name='type',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='digipal.placetype'),
        ),
        migrations.CreateModel(
            name='Owner',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('legacy_id', models.IntegerField(blank=True, null=True)),
                ('date', models.CharField(max_length=128)),
                ('display_label', models.CharField(blank=True, default='', max_length=250)),
                ('evidence', models.TextField()),
                ('rebound', models.BooleanField(null=True)),
                ('annotated', models.BooleanField(null=True)),
                ('dubitable', models.BooleanField(null=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('institution', models.ForeignKey(blank=True, default=None, help_text='Please select either an institution or a person. Deprecated, please use `Repository` instead.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='owners', to='digipal.institution')),
                ('person', models.ForeignKey(blank=True, default=None, help_text='Please select either an institution or a person. Deprecated, please use `Repository` instead.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='owners', to='digipal.person')),
                ('repository', models.ForeignKey(blank=True, default=None, help_text='`Repository` actually represents the institution, person or library owning the item.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='owners', to='digipal.repository')),
            ],
            options={
                'ordering': ['date'],
            },
        ),
        migrations.CreateModel(
            name='Ontograph',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=128)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('nesting_level', models.IntegerField(default=0, help_text='An ontograph can contain another ontograph of a higher level. E.g. level 3 con be made of ontographs of level 4 and above. Set 0 to prevent any nesting.')),
                ('sort_order', models.IntegerField(default=0)),
                ('ontograph_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='digipal.ontographtype', verbose_name='type')),
            ],
            options={
                'ordering': ['sort_order', 'ontograph_type__name', 'name'],
                'unique_together': {('name', 'ontograph_type')},
            },
        ),
        migrations.CreateModel(
            name='Layout',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('page_height', models.IntegerField(blank=True, null=True)),
                ('page_width', models.IntegerField(blank=True, null=True)),
                ('frame_height', models.IntegerField(blank=True, null=True)),
                ('frame_width', models.IntegerField(blank=True, null=True)),
                ('tramline_width', models.IntegerField(blank=True, null=True)),
                ('lines', models.IntegerField(blank=True, null=True)),
                ('columns', models.IntegerField(blank=True, null=True)),
                ('on_top_line', models.BooleanField(null=True)),
                ('multiple_sheet_rulling', models.BooleanField(null=True)),
                ('bilinear_ruling', models.BooleanField(null=True)),
                ('comments', models.TextField(blank=True, null=True)),
                ('insular_pricking', models.BooleanField(null=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('hair_arrangement', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='digipal.hair')),
                ('historical_item', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='digipal.historicalitem')),
                ('item_part', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='layouts', to='digipal.itempart')),
            ],
            options={
                'ordering': ['item_part', 'historical_item'],
            },
        ),
        migrations.CreateModel(
            name='ItemPartItem',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('locus', models.CharField(blank=True, default='', max_length=64)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('historical_item', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='partitions', to='digipal.historicalitem')),
                ('item_part', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='constitutionalities', to='digipal.itempart')),
            ],
            options={
                'verbose_name': 'Item Partition',
                'ordering': ['historical_item__id'],
            },
        ),
        migrations.AddField(
            model_name='itempart',
            name='historical_items',
            field=models.ManyToManyField(related_name='item_parts', through='digipal.ItemPartItem', to='digipal.historicalitem'),
        ),
        migrations.AddField(
            model_name='itempart',
            name='owners',
            field=models.ManyToManyField(blank=True, to='digipal.owner'),
        ),
        migrations.AddField(
            model_name='itempart',
            name='type',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='digipal.itemparttype'),
        ),
        migrations.CreateModel(
            name='ItemOrigin',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('legacy_id', models.IntegerField(blank=True, null=True)),
                ('evidence', models.TextField(blank=True, default='', null=True)),
                ('dubitable', models.BooleanField(null=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('historical_item', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='digipal.historicalitem')),
                ('institution', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='item_origins', to='digipal.institution')),
                ('place', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='item_origins', to='digipal.place')),
            ],
            options={
                'ordering': ['historical_item'],
            },
        ),
        migrations.AddField(
            model_name='institution',
            name='founder',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='person_founder', to='digipal.person'),
        ),
        migrations.AddField(
            model_name='institution',
            name='institution_type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='digipal.institutiontype'),
        ),
        migrations.AddField(
            model_name='institution',
            name='patron',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='person_patron', to='digipal.person'),
        ),
        migrations.AddField(
            model_name='institution',
            name='place',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='digipal.place'),
        ),
        migrations.AddField(
            model_name='institution',
            name='reformer',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='person_reformer', to='digipal.person'),
        ),
        migrations.CreateModel(
            name='Image',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('keywords_string', models.CharField(blank=True, editable=False, max_length=500)),
                ('locus', models.CharField(blank=True, default='', max_length=64)),
                ('folio_side', models.CharField(blank=True, max_length=4, null=True)),
                ('folio_number', models.CharField(blank=True, max_length=8, null=True)),
                ('caption', models.CharField(blank=True, max_length=256, null=True)),
                ('image', models.ImageField(blank=True, null=True, upload_to='uploads/images/')),
                ('iipimage', iipimage.fields.ImageField(blank=True, max_length=200, null=True, storage=iipimage.storage.ImageStorage(), upload_to=digipal.iipfield.storage.get_image_path)),
                ('display_label', models.CharField(max_length=128)),
                ('custom_label', models.CharField(blank=True, help_text='Leave blank unless you want to customise the value of the display label field', max_length=128, null=True)),
                ('transcription', models.TextField(blank=True, null=True)),
                ('internal_notes', models.TextField(blank=True, null=True)),
                ('width', models.IntegerField(default=0)),
                ('height', models.IntegerField(default=0)),
                ('size', models.IntegerField(default=0)),
                ('quire', models.CharField(blank=True, default=None, help_text='A quire number, e.g. 3', max_length=10, null=True)),
                ('page_boundaries', models.CharField(blank=True, default=None, help_text='relative coordinates of the page boundaries in json. e.g. [[0.3, 0.1], [0.7, 0.9]]', max_length=100, null=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('annotation_status', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='images', to='digipal.imageannotationstatus')),
                ('item_part', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='images', to='digipal.itempart')),
                ('media_permission', models.ForeignKey(blank=True, default=None, help_text='This field determines if the image is publicly visible and the reason if not.', null=True, on_delete=django.db.models.deletion.CASCADE, to='digipal.mediapermission')),
            ],
            options={
                'ordering': ['item_part__display_label', 'folio_number', 'folio_side'],
            },
        ),
        migrations.CreateModel(
            name='IdiographComponent',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('component', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='digipal.component')),
                ('features', models.ManyToManyField(to='digipal.feature')),
                ('idiograph', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='digipal.idiograph')),
            ],
            options={
                'ordering': ['idiograph', 'component'],
            },
        ),
        migrations.AddField(
            model_name='idiograph',
            name='scribe',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='idiographs', to='digipal.scribe'),
        ),
        migrations.CreateModel(
            name='HistoricalItemDate',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('legacy_id', models.IntegerField(blank=True, null=True)),
                ('evidence', models.TextField()),
                ('vernacular', models.BooleanField(null=True)),
                ('addition', models.BooleanField(null=True)),
                ('dubitable', models.BooleanField(null=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('date', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='digipal.date')),
                ('historical_item', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='digipal.historicalitem')),
            ],
            options={
                'ordering': ['date'],
            },
        ),
        migrations.AddField(
            model_name='historicalitem',
            name='historical_item_type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='digipal.historicalitemtype'),
        ),
        migrations.AddField(
            model_name='historicalitem',
            name='language',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='digipal.language'),
        ),
        migrations.AddField(
            model_name='historicalitem',
            name='owners',
            field=models.ManyToManyField(blank=True, to='digipal.owner'),
        ),
        migrations.CreateModel(
            name='HandDescription',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.TextField(help_text='This field accepts TEI elements.')),
                ('label', models.CharField(blank=True, help_text="A label assigned to this hand by a source. E.g. 'Alpha' (for source 'Flight').", max_length=64, null=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('hand', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='descriptions', to='digipal.hand')),
                ('source', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='hand_descriptions', to='digipal.source')),
            ],
            options={
                'ordering': ['hand', 'source__priority'],
            },
        ),
        migrations.AddField(
            model_name='hand',
            name='assigned_place',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='digipal.place'),
        ),
        migrations.AddField(
            model_name='hand',
            name='glossed_text',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='digipal.category'),
        ),
        migrations.AddField(
            model_name='hand',
            name='images',
            field=models.ManyToManyField(blank=True, help_text='Select the images this hand appears in. The list of available images comes from images connected to the Item Part associated to this Hand.', related_name='hands', to='digipal.image'),
        ),
        migrations.AddField(
            model_name='hand',
            name='item_part',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='hands', to='digipal.itempart'),
        ),
        migrations.AddField(
            model_name='hand',
            name='latin_style',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='digipal.latinstyle'),
        ),
        migrations.AddField(
            model_name='hand',
            name='scribe',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='hands', to='digipal.scribe'),
        ),
        migrations.AddField(
            model_name='hand',
            name='script',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='digipal.script'),
        ),
        migrations.AddField(
            model_name='hand',
            name='stewart_record',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='hands', to='digipal.stewartrecord'),
        ),
        migrations.CreateModel(
            name='GraphComponent',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('component', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='digipal.component')),
                ('features', models.ManyToManyField(to='digipal.feature')),
                ('graph', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='graph_components', to='digipal.graph')),
            ],
            options={
                'ordering': ['graph', 'component'],
            },
        ),
        migrations.AddField(
            model_name='graph',
            name='hand',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='graphs', to='digipal.hand'),
        ),
        migrations.AddField(
            model_name='graph',
            name='idiograph',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='digipal.idiograph'),
        ),
        migrations.CreateModel(
            name='Decoration',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('illustrated', models.BooleanField(null=True)),
                ('decorated', models.BooleanField(null=True)),
                ('illuminated', models.BooleanField(null=True)),
                ('num_colours', models.IntegerField(blank=True, null=True)),
                ('colours', models.CharField(blank=True, max_length=256, null=True)),
                ('num_inks', models.IntegerField(blank=True, null=True)),
                ('inks', models.CharField(blank=True, max_length=256, null=True)),
                ('style', models.CharField(blank=True, max_length=256, null=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('catalogue_references', models.CharField(blank=True, max_length=256, null=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('historical_item', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='digipal.historicalitem')),
            ],
            options={
                'ordering': ['historical_item'],
            },
        ),
        migrations.CreateModel(
            name='DateEvidence',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('legacy_id', models.IntegerField(blank=True, null=True)),
                ('is_firm_date', models.BooleanField(default=False)),
                ('date_description', models.CharField(blank=True, max_length=128, null=True)),
                ('evidence', models.TextField(blank=True, default='', max_length=255, null=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('date', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='digipal.date')),
                ('hand', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.CASCADE, to='digipal.hand')),
                ('historical_item', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='date_evidences', to='digipal.historicalitem')),
                ('reference', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='digipal.reference')),
            ],
            options={
                'ordering': ['date'],
            },
        ),
        migrations.AddField(
            model_name='currentitem',
            name='owners',
            field=models.ManyToManyField(blank=True, default=None, related_name='current_items', to='digipal.owner'),
        ),
        migrations.AddField(
            model_name='currentitem',
            name='repository',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='digipal.repository'),
        ),
        migrations.CreateModel(
            name='ComponentFeature',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('set_by_default', models.BooleanField(default=False)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('component', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='digipal.component')),
                ('feature', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='digipal.feature')),
            ],
            options={
                'db_table': 'digipal_component_features',
                'ordering': ['component__name', 'feature__name'],
                'unique_together': {('component', 'feature')},
            },
        ),
        migrations.AddField(
            model_name='component',
            name='features',
            field=models.ManyToManyField(related_name='components', through='digipal.ComponentFeature', to='digipal.feature'),
        ),
        migrations.CreateModel(
            name='Collation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('fragment', models.BooleanField(null=True)),
                ('leaves', models.IntegerField(blank=True, null=True)),
                ('front_flyleaves', models.IntegerField(blank=True, null=True)),
                ('back_flyleaves', models.IntegerField(blank=True, null=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('historical_item', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='digipal.historicalitem')),
            ],
            options={
                'ordering': ['historical_item'],
            },
        ),
        migrations.CreateModel(
            name='Character',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=128, unique=True)),
                ('unicode_point', models.CharField(blank=True, max_length=32, null=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('components', models.ManyToManyField(blank=True, to='digipal.component')),
                ('form', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='digipal.characterform')),
                ('ontograph', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='digipal.ontograph')),
            ],
            options={
                'ordering': ['ontograph__sort_order', 'ontograph__ontograph_type__name', 'name'],
            },
        ),
        migrations.AddField(
            model_name='aspect',
            name='features',
            field=models.ManyToManyField(to='digipal.feature'),
        ),
        migrations.CreateModel(
            name='Archive',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('legacy_id', models.IntegerField(blank=True, null=True)),
                ('object_id', models.PositiveIntegerField()),
                ('dubitable', models.BooleanField(null=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contenttypes.contenttype')),
                ('historical_item', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='digipal.historicalitem')),
            ],
            options={
                'ordering': ['historical_item'],
            },
        ),
        migrations.CreateModel(
            name='Annotation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cutout', models.CharField(blank=True, default=None, max_length=256, null=True)),
                ('rotation', models.FloatField(default=0.0)),
                ('vector_id', models.TextField(blank=True, default='')),
                ('geo_json', models.TextField()),
                ('display_note', tinymce.models.HTMLField(blank=True, help_text='An optional note that will be publicly visible on the website.', null=True)),
                ('internal_note', tinymce.models.HTMLField(blank=True, help_text='An optional note for internal or editorial purpose only. Will not be visible on the website.', null=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('holes', models.CharField(blank=True, max_length=1000, null=True)),
                ('clientid', models.CharField(blank=True, db_index=True, max_length=24, null=True)),
                ('type', models.CharField(blank=True, db_index=True, default=None, max_length=15, null=True)),
                ('illustration_ductus', models.ImageField(blank=True, null=True, upload_to='uploads/images/')),
                ('after', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='allograph_after', to='digipal.allograph')),
                ('author', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('before', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='allograph_before', to='digipal.allograph')),
                ('graph', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='digipal.graph')),
                ('image', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='digipal.image')),
                ('status', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='digipal.status')),
            ],
            options={
                'ordering': ['graph', 'modified'],
            },
        ),
        migrations.CreateModel(
            name='Alphabet',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=128, unique=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('hands', models.ManyToManyField(blank=True, to='digipal.hand')),
                ('ontographs', models.ManyToManyField(blank=True, to='digipal.ontograph')),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='AllographComponent',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('allograph', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='allograph_components', to='digipal.allograph')),
                ('component', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='digipal.component')),
                ('features', models.ManyToManyField(blank=True, to='digipal.feature')),
            ],
            options={
                'ordering': ['allograph', 'component'],
            },
        ),
        migrations.AddField(
            model_name='allograph',
            name='aspects',
            field=models.ManyToManyField(blank=True, to='digipal.aspect'),
        ),
        migrations.AddField(
            model_name='allograph',
            name='character',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='digipal.character'),
        ),
        migrations.AlterUniqueTogether(
            name='text',
            unique_together={('name',)},
        ),
        migrations.CreateModel(
            name='ItemPartAuthenticity',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('note', models.TextField(blank=True, default=None, null=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='itempart_authenticity', to='digipal.authenticitycategory')),
                ('item_part', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='authenticities', to='digipal.itempart')),
                ('source', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='itempart_authenticity', to='digipal.source')),
            ],
            options={
                'unique_together': {('item_part', 'category', 'source')},
            },
        ),
        migrations.CreateModel(
            name='Description',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', tinymce.models.HTMLField(blank=True, null=True)),
                ('comments', models.TextField(blank=True, null=True)),
                ('summary', models.CharField(blank=True, max_length=256, null=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('historical_item', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='digipal.historicalitem')),
                ('source', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='digipal.source')),
                ('text', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='descriptions', to='digipal.text')),
            ],
            options={
                'ordering': ['historical_item', 'text'],
                'unique_together': {('source', 'historical_item', 'text')},
            },
        ),
        migrations.AlterUniqueTogether(
            name='currentitem',
            unique_together={('repository', 'shelfmark')},
        ),
        migrations.CreateModel(
            name='CatalogueNumber',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('number', models.CharField(max_length=100)),
                ('number_slug', models.SlugField(blank=True, max_length=100, null=True)),
                ('url', models.URLField(blank=True, null=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('historical_item', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='catalogue_numbers', to='digipal.historicalitem')),
                ('source', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='digipal.source')),
                ('text', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='catalogue_numbers', to='digipal.text')),
            ],
            options={
                'ordering': ['source', 'number'],
                'unique_together': {('source', 'number', 'historical_item', 'text')},
            },
        ),
        migrations.AlterUniqueTogether(
            name='allograph',
            unique_together={('name', 'character')},
        ),
    ]
